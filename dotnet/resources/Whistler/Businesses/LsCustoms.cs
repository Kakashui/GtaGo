using GTANetworkAPI;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using Whistler.SDK;
using Whistler.Businesses;
using Whistler.VehicleSystem.Models;
using Whistler.VehicleSystem;
using Whistler.Helpers;
using Whistler.VehicleSystem.Models.Configs;
using Whistler.MoneySystem;
using Whistler.Businesses.Models;
using Whistler.PriceSystem;
using Whistler.Entities;

namespace Whistler.Core
{
    partial class BusinessManager : Script
    {
        public static event Action<ExtPlayer> PlayerBuyTuning;

        public static float percentCarPrice = 5000000F;

        /// <summary>
        /// tuning prices
        /// </summary>
        public static Dictionary<ModTypes, TuningPartsFix> TuningParts = new Dictionary<ModTypes, TuningPartsFix>()
        {
            {ModTypes.Spoilers, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.FrontBumper, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.RearBumper, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.SideSkirt, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.Exhaust, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.Frame, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.Grille, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.Hood, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.Fender, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.RightFender, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.Roof, new TuningPartsFix(50, 100, 0, 2)},
            {ModTypes.Engine, new TuningPartsFix(50, 300, 200, 2)},
            {ModTypes.Brakes, new TuningPartsFix(50, 70, 20, 2)},
            {ModTypes.Transmission, new TuningPartsFix(50, 80, 20, 2)},
            {ModTypes.Horns, new TuningPartsFix(50, 100, 0, 1)},
            {ModTypes.Suspension, new TuningPartsFix(50, 100, 10, 2)},
            {ModTypes.Armor, new TuningPartsFix(50, 1000, 1000, 2)},
            {ModTypes.Turbo, new TuningPartsFix(50, 1200, 400, 2)},
            {ModTypes.Xenon, new TuningPartsFix(50, 500, 0, 1)},
            {ModTypes.FrontWheels, new TuningPartsFix(50, 100, 0, 0.1F)},
            {ModTypes.BackWheels, new TuningPartsFix(50, 100, 0, 0)},
            {ModTypes.Plateholders, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.VanityPlates, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.TrimDesign, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.Ornaments, new TuningPartsFix(50, 100, 0, 0.1F)},
            {ModTypes.Cabin, new TuningPartsFix(50, 100, 0, 0.7F)},
            {ModTypes.DialDesign, new TuningPartsFix(50, 100, 0, 0.6F)},
            {ModTypes.DoorDesign, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.Seats, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.SteeringWheel, new TuningPartsFix(50, 100, 0, 0.4F)},
            {ModTypes.ShiftLever, new TuningPartsFix(50, 100, 0, 0.4F)},
            {ModTypes.Plaques, new TuningPartsFix(50, 100, 0, 0.3F)},
            {ModTypes.Speakers, new TuningPartsFix(50, 100, 0, 0.3F)},
            {ModTypes.Trunk, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.Hydraulics, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.EngineBlock, new TuningPartsFix(50, 100, 0, 0.2F)},
            {ModTypes.AirFilter, new TuningPartsFix(50, 100, 0, 0.2F)},
            {ModTypes.Struts, new TuningPartsFix(50, 100, 0, 0.2F)},
            {ModTypes.ArchCover, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.Aerials, new TuningPartsFix(50, 100, 0, 0.1F)},
            {ModTypes.Trim, new TuningPartsFix(50, 100, 0, 0.1F)},
            {ModTypes.WindowsTypes, new TuningPartsFix(50, 100, 0, 0.2F)},
            {ModTypes.Livery, new TuningPartsFix(50, 500, 0, 0.8F)},
            {ModTypes.WheelsColor, new TuningPartsFix(50, 200, 0, 0.5F)},
            {ModTypes.NumberType, new TuningPartsFix(50, 100, 0, 0.5F)},
            {ModTypes.WindowToning, new TuningPartsFix(50, 200, 0, 0.3F)},

        };

        /// <summary>
        /// цены на уникальные цвета и неон
        /// </summary>
        public static Dictionary<int, TuningPartsFix> PriceTypeColor = new Dictionary<int, TuningPartsFix>()
        {
            { 0, new TuningPartsFix(100, 100, 0, 0.4F) },  //обычный
            { 1, new TuningPartsFix(100, 100, 0, 0.4F) },  //металлик
            { 2, new TuningPartsFix(50, 10000, 0, 0) },  //перламутр
            { 3, new TuningPartsFix(1000, 1000, 0, 0.4F) },  //матовый
            { 4, new TuningPartsFix(1000, 1000, 0, 0.4F) },  //металл
            { 5, new TuningPartsFix(2000, 2000, 0, 0.4F) },  //хром
            { 6, new TuningPartsFix(50, 1000, 0, 0.4F) },  //неон
            { 7, new TuningPartsFix(50, 1000, 0, 0) },  //цвет дыма
            { 8, new TuningPartsFix(50, 3000, 0, 0.4F) },  //неон
        };

        /// <summary>
        /// ezclusive vinils,dont available in LS Custom
        /// </summary>
        public static Dictionary<uint, List<int>> ExclusiveLivery = new Dictionary<uint, List<int>>()
        {
            { NAPI.Util.GetHashKey("g65go"), new List<int>(){ 8, 9, 10, 11, 12 } },
            { NAPI.Util.GetHashKey("chirongo"), new List<int>(){ 0, 1 } },
            { NAPI.Util.GetHashKey("gtrr35"), new List<int>(){ 0 } },
        };

        /// <summary>
        /// wheels list
        /// </summary>
        public static Dictionary<int, Dictionary<int, int>> TuningWheels = new Dictionary<int, Dictionary<int, int>>()
        {
            // sport
            { 0, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 276 },
                { 1, 390 },
                { 2, 420 },
                { 3, 396 },
                { 4, 1100 },
                { 5, 420 },
                { 6, 414 },
                { 7, 360 },
                { 8, 363 },
                { 9, 390 },
                { 10, 459 },
                { 11, 369 },
                { 12, 327 },
                { 13, 390 },
                { 14, 336 },
                { 15, 396 },
                { 16, 282 },
                { 17, 45 },
                { 18, 297 },
                { 19, 45 },
                { 20, 396 },
                { 21, 420 },
                { 22, 498 },
                { 23, 360 },
                { 24, 390 },
                { 25, 390 },
                { 26, 390 },
                { 27, 390 },
                { 28, 390 },
                { 29, 390 },
                { 30, 390 },
                { 31, 390 },
                { 32, 390 },
                { 33, 390 },
                { 34, 390 },
                { 35, 390 },
                { 36, 390 },
                { 37, 390 },
                { 38, 390 },
                { 39, 390 },
                { 40, 390 },
                { 41, 390 },
                { 42, 390 },
                { 43, 390 },
                { 44, 390 },
                { 45, 390 },
                { 46, 390 },
                { 47, 390 },
                { 48, 390 },
                { 49, 390 },
                { 50, 390 },
                { 51, 390 },
                { 52, 390 },
                { 53, 390 },
                { 54, 390 },
                { 55, 390 },
                { 56, 390 },
                { 57, 390 },
                { 58, 390 },
                { 59, 390 },
                { 60, 390 },
                { 61, 390 },
                { 62, 390 },
                { 63, 390 },
                { 64, 390 },
                { 65, 390 },
                { 66, 390 },
                { 67, 390 },
                { 68, 390 },
                { 69, 390 },
                { 70, 390 },
                { 71, 390 },
                { 72, 390 },
                { 73, 390 },
                { 74, 390 },
                { 75, 390 },
                { 76, 390 },
                { 77, 390 },
                { 78, 390 },
                { 79, 390 },
                { 80, 390 },
                { 81, 390 },
                { 82, 390 },
                { 83, 390 },
                { 84, 390 },
                { 85, 390 },
                { 86, 390 },
                { 87, 390 },
                { 88, 390 },
                { 89, 390 },
                { 90, 390 },
                { 91, 390 },
                { 92, 390 },
                { 93, 390 },
                { 94, 390 },
                { 95, 390 },
                { 96, 390 },
                { 97, 390 },
                { 98, 390 },
                { 99, 390 },
                { 100, 390 },
                { 101, 390 },
                { 102, 390 },
                { 103, 390 },
                { 104, 390 },
                { 105, 390 },
                { 106, 390 },
                { 107, 390 },
                { 108, 390 },
                { 109, 390 },
                { 110, 390 },
                { 111, 390 },
                { 112, 390 },
                { 113, 390 },
                { 114, 390 },
                { 115, 390 },
                { 116, 390 },
                { 117, 390 },
                { 118, 390 },
                { 119, 390 },
                { 120, 390 },
                { 121, 390 },
                { 122, 390 },
                { 123, 390 },
                { 124, 390 },
                { 125, 390 },
                { 126, 390 },
                { 127, 390 },
                { 128, 390 },
                { 129, 390 },
                { 130, 390 },
                { 131, 390 },
                { 132, 390 },
                { 133, 390 },
                { 134, 390 },
                { 135, 390 },
                { 136, 390 },
                { 137, 390 },
                { 138, 390 },
                { 139, 390 },
                { 140, 390 },
                { 141, 390 },
                { 142, 390 },
                { 143, 390 },
                { 144, 390 },
                { 145, 390 },
                { 146, 390 },
                { 147, 390 },
                { 148, 390 },
                { 149, 390 },
                { 150, 390 },
                { 151, 390 },
            }},
            // muscle
            { 1, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 30 },
                { 1, 150 },
                { 2, 49 },
                { 3, 180 },
                { 4, 195 },
                { 5, 168 },
                { 6, 177 },
                { 7, 210 },
                { 8, 180 },
                { 9, 210 },
                { 10, 180 },
                { 11, 49 },
                { 12, 150 },
                { 13, 180 },
                { 14, 150 },
                { 15, 180 },
                { 16, 240 },
                { 17, 210 },
                { 18, 30 },
                { 19, 150 },
                { 20, 49 },
                { 21, 180 },
                { 22, 195 },
                { 23, 168 },
                { 24, 177 },
                { 25, 210 },
                { 26, 180 },
                { 27, 210 },
                { 28, 180 },
                { 29, 49 },
                { 30, 150 },
                { 31, 180 },
                { 32, 150 },
                { 33, 180 },
                { 34, 240 },
                { 35, 210 },
            }},
            // lowrider
            { 2, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 183 },
                { 1, 195 },
                { 2, 183 },
                { 3, 207 },
                { 4, 210 },
                { 5, 40 },
                { 6, 225 },
                { 7, 240 },
                { 8, 255 },
                { 9, 255 },
                { 10, 45 },
                { 11, 180 },
                { 12, 183 },
                { 13, 210 },
                { 14, 240 },
                { 15, 183 },
                { 16, 195 },
                { 17, 183 },
                { 18, 207 },
                { 19, 210 },
                { 20, 21 },
                { 21, 225 },
                { 22, 240 },
                { 23, 255 },
                { 24, 255 },
                { 25, 45 },
                { 26, 180 },
                { 27, 180 },
                { 28, 210 },
                { 29, 240 },
            }},
            // allroad
            { 3, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 180 },
                { 1, 240 },
                { 2, 270 },
                { 3, 303 },
                { 4, 171 },
                { 5, 201 },
                { 6, 261 },
                { 7, 40 },
                { 8, 264 },
                { 9, 300 },
                { 10, 300 },
                { 11, 300 },
                { 12, 300 },
                { 13, 300 },
                { 14, 300 },
                { 15, 300 },
                { 16, 300 },
                { 17, 300 },
                { 18, 300 },
                { 19, 300 },
                { 20, 300 },
                { 21, 300 },
                { 22, 300 },
                { 23, 300 },
                { 24, 300 },
                { 25, 300 },
                { 26, 300 },
                { 27, 300 },
                { 28, 300 },
                { 29, 300 },
                { 30, 300 },
                { 31, 300 },
                { 32, 300 },
                { 33, 300 },
                { 34, 300 },
                { 35, 300 },
                { 36, 300 },
                { 37, 300 },
                { 38, 500 },
                { 39, 500 },
                { 40, 500 },
                { 41, 500 },
            }},
            // 4x4
            { 4, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 180 },
                { 1, 225 },
                { 2, 189 },
                { 3, 237 },
                { 4, 240 },
                { 5, 276 },
                { 6, 189 },
                { 7, 156 },
                { 8, 267 },
                { 9, 222 },
                { 10, 180 },
                { 11, 190 },
                { 12, 240 },
                { 13, 210 },
                { 14, 240 },
                { 15, 180 },
                { 16, 1100 },
                { 17, 1100 },
                { 18, 1100 },
                { 19, 1100 },
            }},
            // tune
            { 5, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 40 },
                { 1, 240 },
                { 2, 246 },
                { 3, 306 },
                { 4, 273 },
                { 5, 261 },
                { 6, 276 },
                { 7, 243 },
                { 8, 276 },
                { 9, 225 },
                { 10, 309 },
                { 11, 243 },
                { 12, 276 },
                { 13, 300 },
                { 14, 297 },
                { 15, 246 },
                { 16, 273 },
                { 17, 285 },
                { 18, 246 },
                { 19, 279 },
                { 20, 288 },
                { 21, 291 },
                { 22, 246 },
                { 23, 219 },
                { 24, 40 },
                { 25, 240 },
                { 26, 246 },
                { 27, 306 },
                { 28, 273 },
                { 29, 261 },
                { 30, 276 },
                { 31, 243 },
                { 32, 276 },
                { 33, 225 },
                { 34, 309 },
                { 35, 243 },
                { 36, 276 },
                { 37, 300 },
                { 38, 297 },
                { 39, 246 },
                { 40, 273 },
                { 41, 285 },
                { 42, 246 },
                { 43, 279 },
                { 44, 288 },
                { 45, 291 },
                { 46, 246 },
                { 47, 219 },
            }},
            // moto
            { 6, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 100 },
                { 1, 100 },
                { 2, 100 },
                { 3, 100 },
                { 4, 100 },
                { 5, 100 },
                { 6, 100 },
                { 7, 100 },
                { 8, 100 },
                { 9, 100 },
                { 10, 100 },
                { 11, 100 },
                { 12, 100 },
                { 13, 100 },
                { 14, 100 },
                { 15, 100 },
                { 16, 100 },
                { 17, 100 },
                { 18, 100 },
                { 19, 100 },
                { 20, 100 },
                { 21, 100 },
                { 22, 100 },
                { 23, 100 },
                { 24, 100 },
                { 25, 100 },
                { 26, 100 },
                { 27, 100 },
                { 28, 100 },
                { 29, 100 },
                { 30, 100 },
                { 31, 100 },
                { 32, 100 },
                { 33, 100 },
                { 34, 100 },
                { 35, 100 },
                { 36, 100 },
                { 37, 100 },
                { 38, 100 },
                { 39, 100 },
                { 40, 100 },
                { 41, 100 },
                { 42, 100 },
                { 43, 100 },
                { 44, 100 },
                { 45, 100 },
                { 46, 100 },
                { 47, 100 },
                { 48, 100 },
                { 49, 100 },
                { 50, 100 },
                { 51, 100 },
                { 52, 100 },
                { 53, 100 },
                { 54, 100 },
                { 55, 100 },
                { 56, 100 },
                { 57, 100 },
                { 58, 100 },
                { 59, 100 },
                { 60, 100 },
                { 61, 100 },
                { 62, 100 },
                { 63, 100 },
                { 64, 100 },
                { 65, 100 },
                { 66, 100 },
                { 67, 100 },
                { 68, 100 },
                { 69, 100 },
                { 70, 100 },
                { 71, 100 },
            }},
            // exclusive
            { 7, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 360 },
                { 1, 210 },
                { 2, 246 },
                { 3, 216 },
                { 4, 240 },
                { 5, 264 },
                { 6, 360 },
                { 7, 270 },
                { 8, 306 },
                { 9, 300 },
                { 10, 210 },
                { 11, 303 },
                { 12, 363 },
                { 13, 303 },
                { 14, 393 },
                { 15, 360 },
                { 16, 363 },
                { 17, 303 },
                { 18, 310 },
                { 19, 303 },
                { 20, 360 },
                { 21, 210 },
                { 22, 246 },
                { 23, 216 },
                { 24, 240 },
                { 25, 264 },
                { 26, 360 },
                { 27, 270 },
                { 28, 306 },
                { 29, 300 },
                { 30, 310 },
                { 31, 303 },
                { 32, 363 },
                { 33, 303 },
                { 34, 393 },
                { 35, 360 },
                { 36, 363 },
                { 37, 303 },
                { 38, 310 },
                { 39, 303 },
            }},
            // benny part1
            { 8, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 390 },
                { 1, 390 },
                { 2, 390 },
                { 3, 390 },
                { 4, 390 },
                { 5, 390 },
                { 6, 390 },
                { 7, 390 },
                { 8, 390 },
                { 9, 390 },
                { 10, 390 },
                { 11, 390 },
                { 12, 390 },
                { 13, 390 },
                { 14, 390 },
                { 15, 390 },
                { 16, 390 },
                { 17, 390 },
                { 18, 390 },
                { 19, 390 },
                { 20, 390 },
                { 21, 390 },
                { 22, 390 },
                { 23, 360 },
                { 24, 390 },
                { 25, 390 },
                { 26, 390 },
                { 27, 390 },
                { 28, 390 },
                { 29, 390 },
                { 30, 390 },
                { 31, 390 },
                { 32, 390 },
                { 33, 390 },
                { 34, 390 },
                { 35, 390 },
                { 36, 390 },
                { 37, 390 },
                { 38, 390 },
                { 39, 390 },
                { 40, 390 },
                { 41, 390 },
                { 42, 390 },
                { 43, 390 },
                { 44, 390 },
                { 45, 390 },
                { 46, 390 },
                { 47, 390 },
                { 48, 390 },
                { 49, 390 },
                { 50, 390 },
                { 51, 390 },
                { 52, 390 },
                { 53, 390 },
                { 54, 390 },
                { 55, 390 },
                { 56, 390 },
                { 57, 390 },
                { 58, 390 },
                { 59, 390 },
                { 60, 390 },
                { 61, 390 },
                { 62, 390 },
                { 63, 390 },
                { 64, 390 },
                { 65, 390 },
                { 66, 390 },
                { 67, 390 },
                { 68, 390 },
                { 69, 390 },
                { 70, 390 },
                { 71, 390 },
                { 72, 390 },
                { 73, 390 },
                { 74, 390 },
                { 75, 390 },
                { 76, 390 },
                { 77, 390 },
                { 78, 390 },
                { 79, 390 },
                { 80, 390 },
                { 81, 390 },
                { 82, 390 },
                { 83, 390 },
                { 84, 390 },
                { 85, 390 },
                { 86, 390 },
                { 87, 390 },
                { 88, 390 },
                { 89, 390 },
                { 90, 390 },
                { 91, 390 },
                { 92, 390 },
                { 93, 390 },
                { 94, 390 },
                { 95, 390 },
                { 96, 390 },
                { 97, 390 },
                { 98, 390 },
                { 99, 390 },
                { 100, 390 },
                { 101, 390 },
                { 102, 390 },
                { 103, 390 },
                { 104, 390 },
                { 105, 390 },
                { 106, 390 },
                { 107, 390 },
                { 108, 390 },
                { 109, 390 },
                { 110, 390 },
                { 111, 390 },
                { 112, 390 },
                { 113, 390 },
                { 114, 390 },
                { 115, 390 },
                { 116, 390 },
                { 117, 390 },
                { 118, 390 },
                { 119, 390 },
                { 120, 390 },
                { 121, 390 },
                { 122, 390 },
                { 123, 390 },
                { 124, 390 },
                { 125, 390 },
                { 126, 390 },
                { 127, 390 },
                { 128, 390 },
                { 129, 390 },
                { 130, 390 },
                { 131, 390 },
                { 132, 390 },
                { 133, 390 },
                { 134, 390 },
                { 135, 390 },
                { 136, 390 },
                { 137, 390 },
                { 138, 390 },
                { 139, 390 },
                { 140, 390 },
                { 141, 390 },
                { 142, 390 },
                { 143, 390 },
                { 144, 390 },
                { 145, 390 },
                { 146, 390 },
                { 147, 390 },
                { 148, 390 },
                { 149, 390 },
                { 150, 390 },
                { 151, 390 },
                { 152, 390 },
                { 153, 390 },
                { 154, 390 },
                { 155, 390 },
                { 156, 390 },
                { 157, 390 },
                { 158, 390 },
                { 159, 390 },
                { 160, 390 },
                { 161, 390 },
                { 162, 390 },
                { 163, 390 },
                { 164, 390 },
                { 165, 390 },
                { 166, 390 },
                { 167, 390 },
                { 168, 390 },
                { 169, 390 },
                { 170, 390 },
                { 171, 390 },
                { 172, 390 },
                { 173, 390 },
                { 174, 390 },
                { 175, 390 },
                { 176, 390 },
                { 177, 390 },
                { 178, 390 },
                { 179, 390 },
                { 180, 390 },
                { 181, 390 },
                { 182, 390 },
                { 183, 390 },
                { 184, 390 },
                { 185, 390 },
                { 186, 390 },
                { 187, 390 },
                { 188, 390 },
                { 189, 390 },
                { 190, 390 },
                { 191, 390 },
                { 192, 390 },
                { 193, 390 },
                { 194, 390 },
                { 195, 390 },
                { 196, 390 },
                { 197, 390 },
                { 198, 390 },
                { 199, 390 },
                { 200, 390 },
                { 201, 390 },
                { 202, 390 },
                { 203, 390 },
                { 204, 390 },
                { 205, 390 },
                { 206, 390 },
                { 207, 390 },
                { 208, 390 },
                { 209, 390 },
                { 210, 390 },
                { 211, 390 },
                { 212, 390 },
                { 213, 390 },
                { 214, 390 },
                { 215, 390 },
                { 216, 390 },
            }},
            // benny part2
            { 9, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 390 },
                { 1, 390 },
                { 2, 390 },
                { 3, 390 },
                { 4, 390 },
                { 5, 390 },
                { 6, 390 },
                { 7, 390 },
                { 8, 390 },
                { 9, 390 },
                { 10, 390 },
                { 11, 390 },
                { 12, 390 },
                { 13, 390 },
                { 14, 390 },
                { 15, 390 },
                { 16, 390 },
                { 17, 390 },
                { 18, 390 },
                { 19, 390 },
                { 20, 390 },
                { 21, 390 },
                { 22, 390 },
                { 23, 390 },
                { 24, 390 },
                { 25, 390 },
                { 26, 390 },
                { 27, 390 },
                { 28, 390 },
                { 29, 390 },
                { 30, 390 },
                { 31, 390 },
                { 32, 390 },
                { 33, 390 },
                { 34, 390 },
                { 35, 390 },
                { 36, 390 },
                { 37, 390 },
                { 38, 390 },
                { 39, 390 },
                { 40, 390 },
                { 41, 390 },
                { 42, 390 },
                { 43, 390 },
                { 44, 390 },
                { 45, 390 },
                { 46, 390 },
                { 47, 390 },
                { 48, 390 },
                { 49, 390 },
                { 50, 390 },
                { 51, 390 },
                { 52, 390 },
                { 53, 390 },
                { 54, 390 },
                { 55, 390 },
                { 56, 390 },
                { 57, 390 },
                { 58, 390 },
                { 59, 390 },
                { 60, 390 },
                { 61, 390 },
                { 62, 390 },
                { 63, 390 },
                { 64, 390 },
                { 65, 390 },
                { 66, 390 },
                { 67, 390 },
                { 68, 390 },
                { 69, 390 },
                { 70, 390 },
                { 71, 390 },
                { 72, 390 },
                { 73, 390 },
                { 74, 390 },
                { 75, 390 },
                { 76, 390 },
                { 77, 390 },
                { 78, 390 },
                { 79, 390 },
                { 80, 390 },
                { 81, 390 },
                { 82, 390 },
                { 83, 390 },
                { 84, 390 },
                { 85, 390 },
                { 86, 390 },
                { 87, 390 },
                { 88, 390 },
                { 89, 390 },
                { 90, 390 },
                { 91, 390 },
                { 92, 390 },
                { 93, 390 },
                { 94, 390 },
                { 95, 390 },
                { 96, 390 },
                { 97, 390 },
                { 98, 390 },
                { 99, 390 },
                { 100, 390 },
                { 101, 390 },
                { 102, 390 },
                { 103, 390 },
                { 104, 390 },
                { 105, 390 },
                { 106, 390 },
                { 107, 390 },
                { 108, 390 },
                { 109, 390 },
                { 110, 390 },
                { 111, 390 },
                { 112, 390 },
                { 113, 390 },
                { 114, 390 },
                { 115, 390 },
                { 116, 390 },
                { 117, 390 },
                { 118, 390 },
                { 119, 390 },
                { 120, 390 },
                { 121, 390 },
                { 122, 390 },
                { 123, 390 },
                { 124, 390 },
                { 125, 390 },
                { 126, 390 },
                { 127, 390 },
                { 128, 390 },
                { 129, 390 },
                { 130, 390 },
                { 131, 390 },
                { 132, 390 },
                { 133, 390 },
                { 134, 390 },
                { 135, 390 },
                { 136, 390 },
                { 137, 390 },
                { 138, 390 },
                { 139, 390 },
                { 140, 390 },
                { 141, 390 },
                { 142, 390 },
                { 143, 390 },
                { 144, 390 },
                { 145, 390 },
                { 146, 390 },
                { 147, 390 },
                { 148, 390 },
                { 149, 390 },
                { 150, 390 },
                { 151, 390 },
                { 152, 390 },
                { 153, 390 },
                { 154, 390 },
                { 155, 390 },
                { 156, 390 },
                { 157, 390 },
                { 158, 390 },
                { 159, 390 },
                { 160, 390 },
                { 161, 390 },
                { 162, 390 },
                { 163, 390 },
                { 164, 390 },
                { 165, 390 },
                { 166, 390 },
                { 167, 390 },
                { 168, 390 },
                { 169, 390 },
                { 170, 390 },
                { 171, 390 },
                { 172, 390 },
                { 173, 390 },
                { 174, 390 },
                { 175, 390 },
                { 176, 390 },
                { 177, 390 },
                { 178, 390 },
                { 179, 390 },
                { 180, 390 },
                { 181, 390 },
                { 182, 390 },
                { 183, 390 },
                { 184, 390 },
                { 185, 390 },
                { 186, 390 },
                { 187, 390 },
                { 188, 390 },
                { 189, 390 },
                { 190, 390 },
                { 191, 390 },
                { 192, 390 },
                { 193, 390 },
                { 194, 390 },
                { 195, 390 },
                { 196, 390 },
                { 197, 390 },
                { 198, 390 },
                { 199, 390 },
                { 200, 390 },
                { 201, 390 },
                { 202, 390 },
                { 203, 390 },
                { 204, 390 },
                { 205, 390 },
                { 206, 390 },
                { 207, 390 },
                { 208, 390 },
                { 209, 390 },
                { 210, 390 },
                { 211, 390 },
                { 212, 390 },
                { 213, 390 },
                { 214, 390 },
                { 215, 390 },
                { 216, 390 },
            }},
            // funny
            { 10, new Dictionary<int, int>() {
                { -1, 30 },
                { 0, 390 },
                { 1, 390 },
                { 2, 390 },
                { 3, 390 },
                { 4, 390 },
                { 5, 390 },
                { 6, 390 },
                { 7, 390 },
                { 8, 390 },
                { 9, 390 },
                { 10, 390 },
                { 11, 390 },
                { 12, 390 },
                { 13, 390 },
                { 14, 390 },
                { 15, 390 },
                { 16, 390 },
                { 17, 390 },
                { 18, 390 },
                { 19, 390 },
                { 20, 390 },
                { 21, 390 },
                { 22, 390 },
                { 23, 390 },
                { 24, 390 },
                { 25, 390 },
                { 26, 390 },
                { 27, 390 },
                { 28, 390 },
                { 29, 390 },
                { 30, 390 },
                { 31, 390 },
                { 32, 390 },
                { 33, 390 },
                { 34, 390 },
                { 35, 390 },
                { 36, 390 },
                { 37, 390 },
                { 38, 390 },
                { 39, 390 },
                { 40, 390 },
                { 41, 390 },
                { 42, 390 },
                { 43, 390 },
                { 44, 390 },
                { 45, 390 },
                { 46, 390 },
                { 47, 390 },
                { 48, 390 },
                { 49, 390 },
                { 50, 390 },
                { 51, 390 },
                { 52, 390 },
                { 53, 390 },
                { 54, 390 },
                { 55, 390 },
                { 56, 390 },
                { 57, 390 },
                { 58, 390 },
                { 59, 390 },
                { 60, 390 },
                { 61, 390 },
                { 62, 390 },
                { 63, 390 },
                { 64, 390 },
                { 65, 390 },
                { 66, 390 },
                { 67, 390 },
                { 68, 390 },
                { 69, 390 },
                { 70, 390 },
                { 71, 390 },
                { 72, 390 },
                { 73, 390 },
                { 74, 390 },
                { 75, 390 },
                { 76, 390 },
                { 77, 390 },
                { 78, 390 },
                { 79, 390 },
                { 80, 390 },
                { 81, 390 },
                { 82, 390 },
                { 83, 390 },
                { 84, 390 },
                { 85, 390 },
                { 86, 390 },
                { 87, 390 },
                { 88, 390 },
                { 89, 390 },
                { 90, 390 },
                { 91, 390 },
                { 92, 390 },
                { 93, 390 },
                { 94, 390 },
                { 95, 390 },
                { 96, 390 },
                { 97, 390 },
                { 98, 390 },
                { 99, 390 },
                { 100, 390 },
                { 101, 390 },
                { 102, 390 },
                { 103, 390 },
                { 104, 390 },
                { 105, 390 },
                { 106, 390 },
                { 107, 390 },
                { 108, 390 },
                { 109, 390 },
                { 110, 390 },
                { 111, 390 },
                { 112, 390 },
                { 113, 390 },
                { 114, 390 },
                { 115, 390 },
                { 116, 390 },
                { 117, 390 },
                { 118, 390 },
                { 119, 390 },
                { 120, 390 },
                { 121, 390 },
                { 122, 390 },
                { 123, 390 },
                { 124, 390 },
                { 125, 390 },
                { 126, 390 },
                { 127, 390 },
                { 128, 390 },
                { 129, 390 },
                { 130, 390 },
                { 131, 390 },
                { 132, 390 },
                { 133, 390 },
                { 134, 390 },
                { 135, 390 },
                { 136, 390 },
                { 137, 390 },
                { 138, 390 },
                { 139, 390 },

            }},
        };

        /// <summary>
        /// component price in materials
        /// </summary>
        /// <param name="component"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        private static int GetPriceByParts(ModTypes component, string model, int variant, int wheelType = -2)
        {
            if (!TuningParts.ContainsKey(component) && component != ModTypes.FrontWheels)
                return 0;
            if (component == ModTypes.FrontWheels || component == ModTypes.BackWheels)
                return TuningParts[component].GetPrice(TuningWheels[wheelType][variant], variant, model);
            else
                return TuningParts[component].GetPrice(variant, model);
        }
        public static void LsCustomOpen(ExtPlayer player, bool IsAdmin = false)
        {
            try
            {
                if (!player.IsInVehicle)
                {
                    Notify.Send(player, NotifyType.Error, NotifyPosition.BottomCenter, "Вы не можете модифицировать этот автомобиль", 3000);
                    return;
                }
                if (player.Vehicle.Class == 13)
                {
                    Notify.Send(player, NotifyType.Error, NotifyPosition.BottomCenter, "Велосипед не может быть затюнингован", 3000);
                    return;
                }
                if (player.GetData<int>("BIZ_ID") == -1 && !IsAdmin)
                    return;

                ExtVehicle veh = player.Vehicle as ExtVehicle;

                int pricePart = 100;
                if (IsAdmin)
                {
                    player.Character.BusinessInsideId = -2;
                }
                else
                {

                    if (!veh.Data.CanAccessVehicle(player, AccessType.Tuning))
                    {
                        Notify.Send(player, NotifyType.Error, NotifyPosition.BottomCenter, "Вы не можете модифицировать этот автомобиль", 3000);
                        return;
                    }
                    Business biz = BizList[player.GetData<int>("BIZ_ID")];

                    player.Character.BusinessInsideId = biz.ID;
                    pricePart = biz.GetPriceByProductId(0).CurrentPrice;
                }

                VehicleStreaming.SetEngineState(veh, false);

                int cntTurboStage = 1;
                int modelPrice = 5000000;
                string vehicleModel = veh.Data.ModelName;
                if (VehicleModels.VehicleModelNames.ContainsKey(veh.Model))
                    cntTurboStage = 4;
                modelPrice = PriceManager.GetPriceInDollars(TypePrice.Car, veh.Data.ModelName, 5000000);
                SafeTrigger.ClientEvent(player, "lsCustom:openTun", pricePart, veh.Config.DisplayName, modelPrice, JsonConvert.SerializeObject(veh.Data.VehCustomization), veh.Class, cntTurboStage);
            }
            catch (Exception e) { _logger.WriteError("LcCustomOpen: " + e.ToString()); }
        }

        [Command("lscustom")]
        public static void RemoteEvent_testcars(ExtPlayer player)
        {
            try
            {
                if (!Group.CanUseAdminCommand(player, "lscustom"))
                    return;
                LsCustomOpen(player, true);
            }
            catch (Exception e) { _logger.WriteError("ExitTuning: " + e.ToString()); }
        }

        [RemoteEvent("lsCustom:exitTuning")]
        public static void RemoteEvent_exitTuning(ExtPlayer player)
        {
            try
            {
                ExtVehicle vehicle = player.Vehicle as ExtVehicle;

                player.Character.BusinessInsideId = -1;
                if (vehicle != null)
                {
                    VehicleManager.ApplyCustomization(vehicle);
                    vehicle.Data.Save();
                }
                if (player.HasData("lscustomByDonate")) player.ResetData("lscustomByDonate");
            }
            catch (Exception e) { _logger.WriteError("ExitTuning: " + e.ToString()); }
        }

        [RemoteEvent("lsCustom:buyModTuning")]
        public static void RemoteEvent_lsCustomBuyTuning(ExtPlayer player, params object[] arguments)
        {
            try
            {
                if (!player.IsLogged()) return;

                if (!player.IsInVehicle)
                    return;
                ExtVehicle vehicle = player.Vehicle as ExtVehicle;


                int component = (int)arguments[0];
                int variant = (int)arguments[1];
                int wheelsType = -2;
                if (!Enum.IsDefined(typeof(ModTypes), component))
                {
                    return;
                }
                ModTypes type = (ModTypes)component;

                if (type == ModTypes.FrontWheels || type == ModTypes.BackWheels)
                {
                    wheelsType = (int)arguments[2];
                }

                int bizID = player.Character.BusinessInsideId;

                CustomizationVehicleModel data = vehicle.Data.VehCustomization;

                int price = 0;
                if (bizID != -2)
                {
                    string vehModel = GetVehicleModel(vehicle);
                    Business biz = BizList[bizID];

                    price = GetPriceByParts(type, vehModel, variant, wheelsType);

                    if (type == ModTypes.FrontWheels || type == ModTypes.BackWheels)
                    {
                        if (data.GetComponent(type) == variant && data.GetComponent(ModTypes.WheelsType) == wheelsType)
                            price = 0;
                    }
                    else if (data.GetComponent(type) == variant)
                        price = 0;
                    if (!PaidForBuyTuning(player, price, bizID))
                        return;
                }
                else if (!Group.CanUseAdminCommand(player, "lscustom") && (!player.HasData("lscustomByDonate") || !player.GetData<bool>("lscustomByDonate"))) return;
                if (wheelsType != -2)
                    VehicleCustomization.SetMod(vehicle, ModTypes.WheelsType, wheelsType);
                VehicleCustomization.SetMod(vehicle, type, variant);
                UpdateTuning(player, data);

                PlayerBuyTuning?.Invoke(player);
            }
            catch (Exception e) { _logger.WriteError("lsCustomBuyTuning: " + e.ToString()); }
        }

        [RemoteEvent("lsCustom:buyColor")]
        public static void RemoteEvent_lsCustomBuyColor(ExtPlayer player, params object[] arguments)
        {
            try
            {
                if (!player.IsLogged()) return;
                if (!player.IsInVehicle)
                    return;
                ExtVehicle vehicle = player.Vehicle as ExtVehicle;


                int primR = (int)arguments[0];
                int primG = (int)arguments[1];
                int primB = (int)arguments[2];
                int secR = (int)arguments[3];
                int secG = (int)arguments[4];
                int secB = (int)arguments[5];
                int paintTypePrim = (int)arguments[6];
                int paintTypeSec = (int)arguments[7];
                int pearl = (int)arguments[8];
                int bizID = player.Character.BusinessInsideId;
                CustomizationVehicleModel data = vehicle.Data.VehCustomization;

                int priceColor = 0;
                if (bizID != -2)
                {
                    string vehModel = GetVehicleModel(vehicle);
                    Business biz = BizList[bizID];

                    if (data.PaintTypePrim != paintTypePrim || data.PrimColor.Red != primR || data.PrimColor.Green != primG || data.PrimColor.Blue != primB)
                        priceColor += PriceTypeColor[paintTypePrim].GetPrice(-1, vehModel);
                    if (data.PaintTypeSec != paintTypeSec || data.SecColor.Red != secR || data.SecColor.Green != secG || data.SecColor.Blue != secB)
                        priceColor += PriceTypeColor[paintTypeSec].GetPrice(-1, vehModel);

                    if (data.GetComponent(ModTypes.PearlColor) != pearl)
                        if (pearl == -1)
                            priceColor += PriceTypeColor[2].Stock;
                        else
                            priceColor += PriceTypeColor[2].Modifire;
                    if (!PaidForBuyTuning(player, priceColor, bizID))
                        return;
                }
                else if (!Group.CanUseAdminCommand(player, "lscustom") && (!player.HasData("lscustomByDonate") || !player.GetData<bool>("lscustomByDonate"))) return;

                VehicleCustomization.SetColor(vehicle, new Color(primR, primG, primB), paintTypePrim, true);
                VehicleCustomization.SetColor(vehicle, new Color(secR, secG, secB), paintTypeSec, false);
                VehicleCustomization.SetMod(vehicle, ModTypes.PearlColor, pearl);

                UpdateTuning(player, data);

            }
            catch (Exception e) { _logger.WriteError("lsCustomBuyTuning: " + e.ToString()); }
        }

        [RemoteEvent("lsCustom:buyNeon")]
        public static void RemoteEvent_lsCustomBuyNeon(ExtPlayer player, params object[] arguments)
        {
            try
            {
                if (!player.IsLogged()) return;
                if (!player.IsInVehicle)
                    return;

                ExtVehicle vehicle = player.Vehicle as ExtVehicle;

                Color newColor = new Color((int)arguments[0], (int)arguments[1], (int)arguments[2], (int)arguments[3]);
                string typeColor = (string)arguments[4];

                int bizID = player.Character.BusinessInsideId;
                CustomizationVehicleModel data = vehicle.Data.VehCustomization;

                Color neon2Color = new Color(0, 0, 0, 0);
                if (typeColor == "neon")
                    neon2Color = new Color((int)arguments[5], (int)arguments[6], (int)arguments[7], (int)arguments[8]);
                int priceColor = 0;
                if (bizID != -2)
                {
                    string vehModel = GetVehicleModel(vehicle);
                    switch (typeColor)
                    {
                        case "neon":
                            priceColor += GetPriceColor(data.GetNeonColor(0), newColor, 6, vehModel) + GetPriceColor(data.GetNeonColor(1), neon2Color, 8, vehModel);
                            break;
                        case "tyresmoke":
                            priceColor += GetPriceColor(data.TyreSmokeColor, newColor, 7, vehModel);
                            break;
                    }

                    if (!PaidForBuyTuning(player, priceColor, bizID) && (!player.HasData("lscustomByDonate") || !player.GetData<bool>("lscustomByDonate")))
                        return;
                }
                else if (!Group.CanUseAdminCommand(player, "lscustom")) return;

                if (typeColor == "neon")
                {
                    data.SetNeonColor(newColor, 0);
                    data.SetNeonColor(neon2Color, 1);
                    VehicleCustomization.ApplyNeon(vehicle);
                }
                else if (typeColor == "tyresmoke")
                {
                    VehicleCustomization.SetTyreColor(vehicle, newColor);
                }

                UpdateTuning(player, data);

            }
            catch (Exception e) { _logger.WriteError("lsCustomBuyTuning: " + e.ToString()); }
        }

        private static int GetPriceColor(Color oldColor, Color newColor, int priceIndex, string vehModel)
        {
            if (oldColor.Red != newColor.Red || oldColor.Green != newColor.Green || oldColor.Blue != newColor.Blue || oldColor.Alpha != newColor.Alpha)
            {
                return PriceTypeColor[priceIndex].GetPrice(newColor.Alpha > 0 ? 1 : -1, vehModel);
            }
            return 0;
        }

        private static bool PaidForBuyTuning(ExtPlayer player, int priceInPart, int bizID)
        {
            Business biz = BusinessManager.GetBusiness(bizID);
            if (priceInPart == 0)
            {
                return false;
            }
            ExtVehicle vehicle = player.Vehicle as ExtVehicle;
            if (vehicle == null) return false;

            return BusinessManager.TakeProd(player, biz, player.Character, 
                new BuyModel("Parts", priceInPart, true, (cnt) => cnt), 
                $"Тюнинг авто ({vehicle.Data.ID})", null);
        }

        private static void UpdateTuning(ExtPlayer player, CustomizationVehicleModel data)
        {
            Notify.Send(player, NotifyType.Success, NotifyPosition.BottomCenter, "Вы купили и установили данную модификацию", 3000);
            SafeTrigger.ClientEvent(player, "tuningUpd", JsonConvert.SerializeObject(data));
        }

        public static string GetVehicleModel(ExtVehicle vehicle)
        {
            string vehModel = vehicle.Data.ModelName;
            if (vehModel == null)
                vehModel = vehicle.GetModelName();
            return vehModel;
        }

    }

    class TuningPartsFix
    {
        /// <summary>
        /// Стоимость стандартной детали в материалах
        /// </summary>
        public int Stock { get; }
        /// <summary>
        /// Стоимость кастомной детали в материалах
        /// </summary>
        public int Modifire { get; }
        /// <summary>
        /// Увеличение стоимости последующих деталей
        /// </summary>
        public int Step { get; }
        /// <summary>
        /// Коэффициент влияния стоимости машины на деталь
        /// </summary>
        public float KoefCar { get; }
        /// <summary>
        /// Стоимость тюнинга
        /// </summary>
        /// <param name="stock">Стоимость стандартной детали в материалах</param>
        /// <param name="modifire">Стоимость кастомной детали в материалах</param>
        /// <param name="koef">Коэффициент увеличения стоимости последующих деталей </param>
        public TuningPartsFix(int stock, int modifire, int step, float koefCar)
        {
            Stock = stock;
            Modifire = modifire;
            Step = step;
            KoefCar = koefCar;
        }


        /// <summary>
        /// price multipler by vehicle cost
        /// </summary>
        /// <param name="model"></param>
        /// <param name="tuningParts"></param>
        /// <returns></returns>
        private float GetCarCoef(string model)
        {
            int priceCar = PriceManager.GetPriceInDollars(TypePrice.Car, model, 5000000);
            return priceCar / BusinessManager.percentCarPrice * KoefCar + 1;
        }
        public int GetPrice(int variant, string vehModel)
        {
            if (variant == -1)
                return Stock;
            return (int)((Modifire + (Step * variant)) * GetCarCoef(vehModel));
        }
        public int GetPrice(int price, int variant, string vehModel)
        {
            if (variant == -1)
                return Stock;
            return (int)((price + (Step * variant)) * GetCarCoef(vehModel));
        }

    }
}
