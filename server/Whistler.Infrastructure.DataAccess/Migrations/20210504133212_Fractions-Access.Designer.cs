// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Whistler.Infrastructure.DataAccess;

namespace Whistler.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(ServerContext))]
    [Migration("20210504133212_Fractions-Access")]
    partial class FractionsAccess
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Whistler.Domain.Fractions.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessList")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FractionId")
                        .HasColumnType("int");

                    b.Property<int>("FractionRank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("fraction_access");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Bank.TransactionHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<int>("FromType")
                        .HasColumnType("int");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.Property<int>("ToType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("phones_bank_transact");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Contacts.Block", b =>
                {
                    b.Property<int>("SimCardId")
                        .HasColumnType("int");

                    b.Property<int>("TargetNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SimCardId", "TargetNumber");

                    b.ToTable("phones_blocks");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Contacts.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CallStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("FromSimCardId")
                        .HasColumnType("int");

                    b.Property<int>("TargetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromSimCardId");

                    b.HasIndex("TargetNumber");

                    b.ToTable("phones_callhistory");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HolderSimCardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TargetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HolderSimCardId");

                    b.HasIndex("TargetNumber");

                    b.ToTable("phones_contacts");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Contacts.SimCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("phones_simcards");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayedName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsNumberHided")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastVisit")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SimCardId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SimCardId");

                    b.ToTable("phones_msg_accounts");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.AccountToChat", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("AdminLvl")
                        .HasColumnType("int");

                    b.Property<int?>("BlockedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLeaved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastReadMessageId")
                        .HasColumnType("int");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AccountId", "ChatId");

                    b.HasIndex("BlockedById");

                    b.HasIndex("ChatId");

                    b.HasIndex("LastReadMessageId");

                    b.ToTable("phones_msg_accountsToChat");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("InviteCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InviteCode")
                        .IsUnique();

                    b.ToTable("phones_msg_chats");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("phones_msg_messages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Message");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.MsgContact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HolderAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TargetAccountId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.HasIndex("HolderAccountId");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("phones_msg_contacts");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.News.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCompleate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EditorUUID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MessengerLogin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<bool>("PrimeAdvert")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SenderUUID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("phones_news_advert");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Phone", b =>
                {
                    b.Property<int>("CharacterUuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("InstalledAppsIds")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SimCardId")
                        .HasColumnType("int");

                    b.HasKey("CharacterUuid");

                    b.HasIndex("AccountId");

                    b.HasIndex("SimCardId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Taxi.OrderHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DriverUuid")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("phones_taxi_orders");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.Post", b =>
                {
                    b.HasBaseType("Whistler.Domain.Phone.Messenger.Message");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.ToTable("phones_msg_messages");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Contacts.Call", b =>
                {
                    b.HasOne("Whistler.Domain.Phone.Contacts.SimCard", "FromSimCard")
                        .WithMany()
                        .HasForeignKey("FromSimCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Contacts.Contact", b =>
                {
                    b.HasOne("Whistler.Domain.Phone.Contacts.SimCard", "HolderSimCard")
                        .WithMany("Contacts")
                        .HasForeignKey("HolderSimCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.Account", b =>
                {
                    b.HasOne("Whistler.Domain.Phone.Contacts.SimCard", "SimCard")
                        .WithMany()
                        .HasForeignKey("SimCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.AccountToChat", b =>
                {
                    b.HasOne("Whistler.Domain.Phone.Messenger.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whistler.Domain.Phone.Messenger.Account", "BlockedBy")
                        .WithMany()
                        .HasForeignKey("BlockedById");

                    b.HasOne("Whistler.Domain.Phone.Messenger.Chat", "Chat")
                        .WithMany("AccountToChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whistler.Domain.Phone.Messenger.Message", "LastReadMessage")
                        .WithMany()
                        .HasForeignKey("LastReadMessageId");
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.Message", b =>
                {
                    b.HasOne("Whistler.Domain.Phone.Messenger.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whistler.Domain.Phone.Messenger.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Messenger.MsgContact", b =>
                {
                    b.HasOne("Whistler.Domain.Phone.Messenger.Account", "HolderAccount")
                        .WithMany()
                        .HasForeignKey("HolderAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whistler.Domain.Phone.Messenger.Account", "TargetAccount")
                        .WithMany()
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whistler.Domain.Phone.Phone", b =>
                {
                    b.HasOne("Whistler.Domain.Phone.Messenger.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Whistler.Domain.Phone.Contacts.SimCard", "SimCard")
                        .WithMany()
                        .HasForeignKey("SimCardId");
                });
#pragma warning restore 612, 618
        }
    }
}
